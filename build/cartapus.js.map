{"version":3,"file":"cartapus.js","sources":["../node_modules/tiny-emitter/index.js","../src/cartapus.js"],"sourcesContent":["function E () {\n  // Keep this empty so it's easier to inherit from\n  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)\n}\n\nE.prototype = {\n  on: function (name, callback, ctx) {\n    var e = this.e || (this.e = {});\n\n    (e[name] || (e[name] = [])).push({\n      fn: callback,\n      ctx: ctx\n    });\n\n    return this;\n  },\n\n  once: function (name, callback, ctx) {\n    var self = this;\n    function listener () {\n      self.off(name, listener);\n      callback.apply(ctx, arguments);\n    };\n\n    listener._ = callback\n    return this.on(name, listener, ctx);\n  },\n\n  emit: function (name) {\n    var data = [].slice.call(arguments, 1);\n    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();\n    var i = 0;\n    var len = evtArr.length;\n\n    for (i; i < len; i++) {\n      evtArr[i].fn.apply(evtArr[i].ctx, data);\n    }\n\n    return this;\n  },\n\n  off: function (name, callback) {\n    var e = this.e || (this.e = {});\n    var evts = e[name];\n    var liveEvents = [];\n\n    if (evts && callback) {\n      for (var i = 0, len = evts.length; i < len; i++) {\n        if (evts[i].fn !== callback && evts[i].fn._ !== callback)\n          liveEvents.push(evts[i]);\n      }\n    }\n\n    // Remove event from queue to prevent memory leak\n    // Suggested by https://github.com/lazd\n    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910\n\n    (liveEvents.length)\n      ? e[name] = liveEvents\n      : delete e[name];\n\n    return this;\n  }\n};\n\nmodule.exports = E;\nmodule.exports.TinyEmitter = E;\n","/**\r\n * @file Cartapus core file, dispatches events based on [data-cartapus] elements' visibility in the viewport.\r\n * @author Jordan Thiervoz <jordanthiervoz@gmail.com>\r\n */\r\n\r\nimport Emitter from 'tiny-emitter'\r\n\r\nexport default class Cartapus extends Emitter {\r\n\r\n  /**\r\n   * @param {object} [options] — User options.\r\n   * @param {Element} [options.root=null] — The root DOM element into which [data-cartapus] targets will be watched.\r\n   * @param {string} [options.rootMargin=\"0px\"] — A CSS margin property string defining offsets into the `root` element.\r\n   * @param {number} [options.threshold=0.2] — A number between 0 and 1 which defines the percentage of height that must be into the viewport for an element to be considered \"visible\".\r\n   * @param {boolean} [options.once=false] — If \"true\", elements will only toggle to \"visible\" once and never return to their \"hidden\" state.\r\n   * @param {boolean} [options.event=false] — If \"true\", events will be triggered when an element changes its state. A CustomEvent is triggered on the related element, and an event is also triggered on the Cartapus instance.\r\n   *\r\n   * @extends Emitter\r\n   * @constructor\r\n   */\r\n  constructor(options = {}) {\r\n    super()\r\n\r\n    // Bind callback method.\r\n    this.intersect = this.intersect.bind(this)\r\n\r\n    // Set user options based on default options.\r\n    const defaults = {\r\n      root: null,\r\n      rootMargin: '0px',\r\n      threshold: 0.2,\r\n      once: false,\r\n      events: false\r\n    }\r\n\r\n    this.options = Object.assign(defaults, options)\r\n\r\n    // Creates the default observer then start.\r\n    this.createMainObserver()\r\n    this.init()\r\n  }\r\n\r\n  /**\r\n   * Creates the main IntersectionObserver used with the default options.\r\n   */\r\n  createMainObserver() {\r\n    this.observers = [{\r\n      observer: new IntersectionObserver(this.intersect, this.options),\r\n      threshold: this.options.threshold,\r\n      elements: []\r\n    }]\r\n  }\r\n\r\n  /**\r\n   * Initialization method, starts the IntersectionObservers.\r\n   */\r\n  init() {\r\n    this.getElems()\r\n    this.createObservers()\r\n    this.observe()\r\n  }\r\n\r\n  /**\r\n   * Gets the [data-cartapus] elements from given root or from document.\r\n   */\r\n  getElems() {\r\n    this.elems = this.options.root ? this.options.root.querySelectorAll('[data-cartapus]') : document.querySelectorAll('[data-cartapus]')\r\n  }\r\n\r\n  /**\r\n   * For each [data-cartapus] element, check its inner data-cartapus parameters\r\n   * Create new IntersectionObservers accordingly if parameters differs from the main observer.\r\n   */\r\n  createObservers() {\r\n    for (const el of this.elems) {\r\n      // If element has data-cartapus-threshold attribute.\r\n      if (el.dataset.cartapusThreshold) {\r\n        const threshold = parseFloat(el.dataset.cartapusThreshold)\r\n        let found = false\r\n\r\n        // If an observer already exists with the same threshold, add element to this observer.\r\n        for (const observer of this.observers) {\r\n          if (threshold === observer.threshold) {\r\n            found = true\r\n\r\n            observer.elements.push(el)\r\n          }\r\n        }\r\n\r\n        // If no observer has the same threshold, create a new one with the new threshold.\r\n        if (!found) {\r\n          const observer = {\r\n            observer: new IntersectionObserver(this.intersect, Object.assign(this.options, { threshold })),\r\n            threshold,\r\n            elements: [el]\r\n          }\r\n\r\n          this.observers.push(observer)\r\n        }\r\n      } else this.observers[0].elements.push(el)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Callback function triggered by the observers.\r\n   * Sets the data-cartapus attribute accordingly to the visibility of the elements.\r\n   * Triggers the custom events if the `events` option is enabled.\r\n   *\r\n   * @param {array.<IntersectionObserverEntry>} entries — An array of entries that intersected with the root.\r\n   * @param {IntersectionObserver} observer — The observer that triggered the event.\r\n   */\r\n  intersect(entries, observer) {\r\n    entries.forEach((entry) => {\r\n      // Set data-cartapus attribute value either to \"visible\" or \"hidden\".\r\n      if (entry.isIntersecting) {\r\n        entry.target.dataset.cartapus = 'visible'\r\n\r\n        // Stop observing this element if \"once\" options it true.\r\n        if (this.options.once && entry.target.dataset.cartapusOnce !== 'false') observer.unobserve(entry.target)\r\n      } else entry.target.dataset.cartapus = 'hidden'\r\n\r\n      if (this.options.events) this.dispatch(entry)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Triggers the CustomEvent `cartapusintersect` on the entry's target.\r\n   * Also triggers an `intersect` event on the class instance.\r\n   *\r\n   * @param {IntersectionObserverEntry} entry — The entry that intersected.\r\n   */\r\n  dispatch(entry) {\r\n    // Create event with details.\r\n    const data = {\r\n      element: entry.target,\r\n      visible: entry.isIntersecting,\r\n      intersection: entry\r\n    }\r\n    const event = new CustomEvent('cartapusintersect', { detail: data })\r\n\r\n    // Dispatch element and instance events.\r\n    entry.target.dispatchEvent(event)\r\n    this.emit('intersect', data)\r\n  }\r\n\r\n  /**\r\n   * Turns on all the observers to watch all of their related targets.\r\n   * This will trigger Cartapus events if events are turned on.\r\n   */\r\n  observe() {\r\n    this.observers.forEach((observer) => {\r\n      observer.elements.forEach((el) => {\r\n        observer.observer.observe(el)\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Turns off all the observers to stop watching all of their related targets.\r\n   */\r\n  unobserve() {\r\n    this.observers.forEach((observer) => {\r\n      observer.elements.forEach((el) => {\r\n        observer.observer.unobserve(el)\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Turns off observers and empty their related targets.\r\n   */\r\n  destroy() {\r\n    this.unobserve()\r\n\r\n    this.observers.forEach((observer) => {\r\n      observer.elements = []\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Reset everything.\r\n   * Turns off observers and resets their targets.\r\n   * Then calls `this.init()` to restart everything with new elements to observe.\r\n   * This will trigger Cartapus events if events are turned on.\r\n   */\r\n  reset() {\r\n    this.destroy()\r\n    this.init()\r\n  }\r\n}\r\n"],"names":["E","prototype","on","name","callback","ctx","e","this","push","fn","once","self","listener","off","apply","arguments","_","emit","data","slice","call","evtArr","i","len","length","evts","liveEvents","options","_this","intersect","bind","Object","assign","root","rootMargin","threshold","events","createMainObserver","init","observers","observer","IntersectionObserver","elements","getElems","createObservers","observe","elems","querySelectorAll","document","el","dataset","cartapusThreshold","parseFloat","found","entries","forEach","entry","isIntersecting","target","cartapus","_this2","cartapusOnce","unobserve","dispatch","element","visible","intersection","event","CustomEvent","detail","dispatchEvent","destroy","reset","Emitter"],"mappings":"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"}